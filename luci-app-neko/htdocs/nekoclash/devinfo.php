<?php

$dt=json_decode((shell_exec("ubus call system board")), true);
// MACHINE INFO
$devices=$dt['model'];

// OS TYPE AND KERNEL VERSION
$kernelv=exec("cat /proc/sys/kernel/ostype").' '.exec("cat /proc/sys/kernel/osrelease");
$OSVer=$dt['release']['distribution']." ".$dt['release']['version'];

// MEMORY INFO
$tmpramTotal=exec("cat /proc/meminfo | grep MemTotal | awk '{print $2}'");
$tmpramAvailable=exec("cat /proc/meminfo | grep MemAvailable | awk '{print $2}'");

$ramTotal=number_format(($tmpramTotal/1000),1);
$ramAvailable=number_format(($tmpramAvailable/1000),1);
$ramUsage=number_format((($tmpramTotal-$tmpramAvailable)/1000),1);

// UPTIME
$raw_uptime = exec("cat /proc/uptime | awk '{print $1}'");
$days = floor($raw_uptime / 86400);
$hours = floor(($raw_uptime / 3600) % 24);
$minutes = floor(($raw_uptime / 60) % 60);
$seconds = $raw_uptime % 60;


// CPU FREQUENCY
/*  $cpuFreq = file_get_contents("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq");
$cpuFreq = round($cpuFreq / 1000, 1);

// CPU TEMPERATURE
$cpuTemp = file_get_contents("/sys/class/thermal/thermal_zone0/temp");
$cpuTemp = round($cpuTemp / 1000, 1);
if ($cpuTemp >= 60) {
    $color = "red";
} elseif ($cpuTemp >= 50) {
    $color = "orange";
} else {
    $color = "white";
}

*/

// CPU LOAD AVERAGE
$cpuLoad = shell_exec("cat /proc/loadavg");
$cpuLoad = explode(' ', $cpuLoad);
$cpuLoadAvg1Min = round($cpuLoad[0], 2);
$cpuLoadAvg5Min = round($cpuLoad[1], 2);
$cpuLoadAvg15Min = round($cpuLoad[2], 2);

// CPU INFORMATION
/* $cpuInfo = shell_exec("lscpu");
$cpuCores = preg_match('/^CPU\(s\):\s+(\d+)/m', $cpuInfo, $matches);
$cpuThreads = preg_match('/^Thread\(s\) per core:\s+(\d+)/m', $cpuInfo, $matches);
$cpuModelName = preg_match('/^Model name:\s+(.+)/m', $cpuInfo, $matches);
$cpuFamily = preg_match('/^CPU family:\s+(.+)/m', $cpuInfo, $matches);
*/
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Music Player</title>

<style>
     #container {
          text-align: center;
          margin-top: 50px;
    }
    body {
        font-family: Arial, sans-serif;
        background-color: #f0f0f0;
        overflow: hidden; 
    }

    #player {
        width: 320px;
        height: 320px; 
        margin: 50px auto;
        padding: 20px;     
        background: url('/nekoclash/assets/img/3.svg') no-repeat center center;
        background-size: cover;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        border-radius: 50%;
        transform-style: preserve-3d; 
        transition: transform 0.5s; 
        position: relative;
        animation: rainbow 5s infinite, rotatePlayer 10s linear infinite;
    }

    #player:hover {
        transform: rotateY(360deg) rotateX(360deg);
    }

    #player h2 {
        margin-top: 0;
    }

    #controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        
    }

    button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        box-shadow: 0 4px #666;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    button:active {
        transform: translateY(4px);
        box-shadow: 0 2px #444;
    }

    @keyframes rainbow {
        0% {background-color: red;}
        10% {background-color: orange;}
        20% {background-color: yellow;}
        30% {background-color: #4CAF50;} 
        40% {background-color: cyan;}
        50% {background-color: blue;}
        60% {background-color: indigo;}
        70% {background-color: violet;}
        80% {background-color: magenta;}
        90% {background-color: pink;}
        100% {background-color: red;}
    }

    @keyframes rotatePlayer {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @keyframes fall {
        0% {
            transform: translateY(0) translateX(0);
            opacity: 1;
        }
        100% {
            transform: translateY(100vh) translateX(calc(-50% + 50vw));
            opacity: 0;
        }
    }

    .petal {
            position: absolute;
            top: 0;
            width: 20px;
            height: 20px;
            background: pink;
            border-radius: 50%;
            animation: fall linear;
        }

        #hidePlayer, #timeDisplay {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
            background: linear-gradient(90deg, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #9400D3);
            -webkit-background-clip: text;
            color: transparent;
            transition: background 1s ease;
        }

	.rounded-button {
            border-radius: 30px 15px;
        }		
</style>

</head>
<body>
    <div id="player" onclick="toggleAnimation()"> 
     <p id="hidePlayer" >Mihomo</p>
            <p id="timeDisplay">00:00 </p>
        <audio id="audioPlayer" controls autoplay >  
            <source src="" type="audio/mpeg">
            ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅÈü≥È¢ëÊí≠Êîæ„ÄÇ
        </audio>
      <br>
     <div id="controls">
        <button id="prev" class="rounded-button">‚èÆÔ∏è</button>
        <button id="orderLoop" class="rounded-button">üîÅ</button>
        <button id="play" class="rounded-button">‚è∏Ô∏è</button>
        <button id="next" class="rounded-button">‚è≠Ô∏è</button>        
    </div>  
    <script>
        let colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#9400D3'];

        function applyGradient(text, elementId) {
            const element = document.getElementById(elementId);
            element.innerHTML = ''; 
            for (let i = 0; i < text.length; i++) {
                const span = document.createElement('span');
                span.textContent = text[i];
                span.style.color = colors[i % colors.length];
                element.appendChild(span);
            }

            const firstColor = colors.shift();
            colors.push(firstColor);
        }

        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('zh-CN', { hour12: false });
            applyGradient(timeString, 'timeDisplay');
        }

        applyGradient('Mihomo', 'hidePlayer');
        updateTime();
    
        setInterval(() => {
            updateTime();
            applyGradient('Mihomo', 'hidePlayer');
        }, 1000);

    </script>
    <script>
       
        /* var player = document.getElementById('player');
        var offsetX, offsetY, isDragging = false;

        player.addEventListener('mousedown', function(e) {
            isDragging = true;
            offsetX = e.clientX - player.offsetLeft;
            offsetY = e.clientY - player.offsetTop;
            player.style.cursor = 'grabbing';
        });

        document.addEventListener('mousemove', function(e) {
            if (isDragging) {
                player.style.left = (e.clientX - offsetX) + 'px';
                player.style.top = (e.clientY - offsetY) + 'px';
            }
        });

        document.addEventListener('mouseup', function() {
            isDragging = false;
            player.style.cursor = 'grab';
        }); */

       document.addEventListener('keydown', function(event) {
            switch(event.key) {
                case 'ArrowLeft': 
                    document.getElementById('prev').click();
                    break;
                case 'ArrowRight': 
                    document.getElementById('next').click();
                    break;
                case ' ': 
                    document.getElementById('play').click();
                    break;
                case 'ArrowUp': 
                    document.getElementById('orderLoop').click();
                    break;
            }
        });
        var hidePlayerButton = document.getElementById('hidePlayer');
        hidePlayerButton.addEventListener('click', function() {
        var player = document.getElementById('player');
        if (player.style.display === 'none') {
            player.style.display = 'flex';
        } else {
            player.style.display = 'none';
          }
        });
        function toggleAnimation() {
            const player = document.getElementById('player');
            if (player.style.animationPlayState === 'paused') {
                player.style.animationPlayState = 'running'; 
            } else {
                player.style.animationPlayState = 'paused'; 
            }
        }
       /*  function createPetal() {
            const petal = document.createElement('div');
            petal.className = 'petal';
            petal.style.left = Math.random() * 100 + 'vw';
            petal.style.animationDuration = Math.random() * 3 + 2 + 's';
            document.body.appendChild(petal);

            petal.addEventListener('animationend', () => {
                petal.remove();
            });
        }

        setInterval(createPetal, 50);
        function clearAllPetals() {
            const petals = document.querySelectorAll('.petal');
            petals.forEach(petal => petal.remove());
        }

        setTimeout(clearAllPetals, 10000);
        */
        function updateTime() {
            var now = new Date();
            var hours = now.getHours().toString().padStart(2, '0');
            var minutes = now.getMinutes().toString().padStart(2, '0');
            var seconds = now.getSeconds().toString().padStart(2, '0');
            document.getElementById('timeDisplay').innerText = hours + ':' + minutes + ':' + seconds + ' ' + getAncientTime(now);
        }

        function getAncientTime(date) {
            const hours = date.getHours();
            let ancientTime;

            if (hours >= 23 || hours < 1) {
                ancientTime = 'Â≠êÊôÇ';
            } else if (hours >= 1 && hours < 3) {
                ancientTime = '‰∏ëÊôÇ';
            } else if (hours >= 3 && hours < 5) {
                ancientTime = 'ÂØÖÊôÇ';
            } else if (hours >= 5 && hours < 7) {
                ancientTime = 'ÂçØÊôÇ';
            } else if (hours >= 7 && hours < 9) {
                ancientTime = 'Ëæ∞ÊôÇ';
            } else if (hours >= 9 && hours < 11) {
                ancientTime = 'Â∑≥ÊôÇ';
            } else if (hours >= 11 && hours < 13) {
                ancientTime = 'ÂçàÊôÇ';
            } else if (hours >= 13 && hours < 15) {
                ancientTime = 'Êú™ÊôÇ';
            } else if (hours >= 15 && hours < 17) {
                ancientTime = 'Áî≥ÊôÇ';
            } else if (hours >= 17 && hours < 19) {
                ancientTime = 'ÈÖâÊôÇ';
            } else if (hours >= 19 && hours < 21) {
                ancientTime = 'ÊàåÊôÇ';
            } else {
                ancientTime = '‰∫•ÊôÇ';
            }

            return ancientTime;
        }

        setInterval(updateTime, 1000); 
        window.onload = updateTime;

        var audioPlayer = document.getElementById('audioPlayer');
        var playButton = document.getElementById('play');
        var nextButton = document.getElementById('next');
        var prevButton = document.getElementById('prev');
        var orderLoopButton = document.getElementById('orderLoop');
        var orderButton = document.getElementById('order'); 
        var isLooping = false; 
        var isOrdered = false; 
        var currentSongIndex = 0;
        var songs = [];

        fetch('https://raw.githubusercontent.com/Thaolga/Rules/main/Clash/songs.txt')
           .then(response => response.text())
           .then(data => {
            songs = data.split('\n').filter(url => url.trim() !== '');
            initializePlayer();
            console.log(songs);
        })
        .catch(error => console.error('Error fetching songs:', error));

        function loadSong(index) {
            if (index >= 0 && index < songs.length) {
                audioPlayer.src = songs[index];
                setTimeout(() => {
                audioPlayer.play();
            }, 65000); 
          }
        }

        playButton.addEventListener('click', function() {
            if (audioPlayer.paused) {
                audioPlayer.play();
            } else {
                audioPlayer.pause();
            }
        });

        nextButton.addEventListener('click', function() {
            currentSongIndex = (currentSongIndex + 1) % songs.length;
            loadSong(currentSongIndex);
        });

        prevButton.addEventListener('click', function() {
            currentSongIndex = (currentSongIndex - 1 + songs.length) % songs.length;
            loadSong(currentSongIndex);
        });

       orderLoopButton.addEventListener('click', function() {
            if (isOrdered) {
                isOrdered = false;
                isLooping = !isLooping; 
                orderLoopButton.textContent = isLooping ? 'Âæ™' : ''; 
            } else {
                isOrdered = true;
                isLooping = false; 
                orderLoopButton.textContent = 'È°∫';
                
                loadSong(currentSongIndex); 
            }
        });  
        audioPlayer.addEventListener('ended', function() {
            if (isLooping) {
                audioPlayer.currentTime = 0; 
                audioPlayer.play(); 
            } else {
                currentSongIndex = (currentSongIndex + 1) % songs.length;
                loadSong(currentSongIndex);
            }
        });
        function initializePlayer() {
            if (songs.length > 0) {
            setTimeout(() => {
            loadSong(currentSongIndex);
        }, 65000); 
    }
}

</script>
</body>
</html>

<?php
date_default_timezone_set('Asia/Shanghai');
?>

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ËØ≠Èü≥Êí≠Êä•Á≥ªÁªü</title>
</head>
<body>
    <script>
        const city = 'Beijing'; // ÊõøÊç¢‰∏∫ÊÇ®ÁöÑÂüéÂ∏ÇÂêç
        const apiKey = 'fc8bd2637768c286c6f1ed5f1915eb22'; 

        function speakMessage(message) {
            const utterance = new SpeechSynthesisUtterance(message);
            utterance.lang = 'zh-CN';
            speechSynthesis.speak(utterance);
        }

        function getGreeting() {
            const hours = new Date().getHours();
            if (hours >= 5 && hours < 12) return 'Êó©‰∏äÂ•ΩÔºÅ';
            if (hours >= 12 && hours < 18) return '‰∏ãÂçàÂ•ΩÔºÅ';
            if (hours >= 18 && hours < 22) return 'Êôö‰∏äÂ•ΩÔºÅ';
            return 'Â§úÊ∑±‰∫ÜÔºåÊ≥®ÊÑè‰ºëÊÅØÔºÅ';
        }

        function speakCurrentTime() {
            const now = new Date();
            const hours = now.getHours();
            const minutes = now.getMinutes().toString().padStart(2, '0');
            const seconds = now.getSeconds().toString().padStart(2, '0');
            const currentTime = `${hours}ÁÇπ${minutes}ÂàÜ${seconds}Áßí`;

            const timeOfDay = (hours >= 5 && hours < 8) ? 'Ê∏ÖÊô®'
                              : (hours >= 8 && hours < 11) ? 'Êó©‰∏ä'
                              : (hours >= 11 && hours < 13) ? '‰∏≠Âçà'
                              : (hours >= 13 && hours < 18) ? '‰∏ãÂçà'
                              : (hours >= 18 && hours < 20) ? 'ÂÇçÊôö'
                              : (hours >= 20 && hours < 24) ? 'Êôö‰∏ä'
                              : 'ÂáåÊô®';

            speakMessage(`${getGreeting()} Áé∞Âú®ÊòØÂåó‰∫¨Êó∂Èó¥: ${timeOfDay}${currentTime}`);
        }

        function updateTime() {
            const now = new Date();
            const hours = now.getHours();
            const timeOfDay = (hours >= 5 && hours < 8) ? 'Ê∏ÖÊô®'
                              : (hours >= 8 && hours < 11) ? 'Êó©‰∏ä'
                              : (hours >= 11 && hours < 13) ? '‰∏≠Âçà'
                              : (hours >= 13 && hours < 18) ? '‰∏ãÂçà'
                              : (hours >= 18 && hours < 20) ? 'ÂÇçÊôö'
                              : (hours >= 20 && hours < 24) ? 'Êôö‰∏ä'
                              : 'ÂáåÊô®';

            if (now.getMinutes() === 0 && now.getSeconds() === 0) {
                speakMessage(`Êï¥ÁÇπÊí≠Êä•ÔºåÁé∞Âú®ÊòØÂåó‰∫¨Êó∂Èó¥ ${timeOfDay} ${hours}ÁÇπ`);
            }
        }

        const websites = [
            'https://www.youtube.com/',
            'https://www.google.com/',
            'https://www.facebook.com/',
            'https://www.twitter.com/',
            'https://www.github.com/'
        ];

        function getWebsiteStatusMessage(url, status) {
            const statusMessages = {
                'https://www.youtube.com/': status ? 'YouTube ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ' : 'Êó†Ê≥ïËÆøÈóÆ YouTube ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ',
                'https://www.google.com/': status ? 'Google ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ' : 'Êó†Ê≥ïËÆøÈóÆ Google ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ',
                'https://www.facebook.com/': status ? 'Facebook ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ' : 'Êó†Ê≥ïËÆøÈóÆ Facebook ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ',
                'https://www.twitter.com/': status ? 'Twitter ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ' : 'Êó†Ê≥ïËÆøÈóÆ Twitter ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ',
                'https://www.github.com/': status ? 'GitHub ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ' : 'Êó†Ê≥ïËÆøÈóÆ GitHub ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ',
            };

            return statusMessages[url] || (status ? `${url} ÁΩëÁ´ôËÆøÈóÆÊ≠£Â∏∏„ÄÇ` : `Êó†Ê≥ïËÆøÈóÆ ${url} ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ`);
        }

        function checkWebsiteAccess(urls) {
            const statusMessages = [];
            let requestsCompleted = 0;

            urls.forEach(url => {
                fetch(url, { mode: 'no-cors' })
                    .then(response => {
                        const isAccessible = response.type === 'opaque';
                        statusMessages.push(getWebsiteStatusMessage(url, isAccessible));
                        
                        if (!isAccessible && url === 'https://www.youtube.com/') {
                            speakMessage('Êó†Ê≥ïËÆøÈóÆ YouTube ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ');
                        }
                    })
                    .catch(() => {
                        statusMessages.push(getWebsiteStatusMessage(url, false));
                        
                        if (url === 'https://www.youtube.com/') {
                            speakMessage('Êó†Ê≥ïËÆøÈóÆ YouTube ÁΩëÁ´ôÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ');
                        }
                    })
                    .finally(() => {
                        requestsCompleted++;
                        if (requestsCompleted === urls.length) {
                            speakMessage(statusMessages.join(' '));
                        }
                    });
            });
        }

        function getRandomPoem() {
            const poems = [
                'Á∫¢Ë±ÜÁîüÂçóÂõΩÔºåÊò•Êù•ÂèëÂá†Êûù„ÄÇ', 'Áã¨Âú®ÂºÇ‰π°‰∏∫ÂºÇÂÆ¢ÔºåÊØèÈÄ¢‰Ω≥ËäÇÂÄçÊÄù‰∫≤„ÄÇ',
                'Êµ∑‰∏äÁîüÊòéÊúàÔºåÂ§©Ê∂ØÂÖ±Ê≠§Êó∂„ÄÇ', '‰ΩÜÊÑø‰∫∫Èïø‰πÖÔºåÂçÉÈáåÂÖ±Â©µÂ®ü„ÄÇ',
                'Ê±üÂçóÂ•ΩÔºåÈ£éÊôØÊóßÊõæË∞ô„ÄÇ', 'Âêõ‰∏çËßÅÈªÑÊ≤≥‰πãÊ∞¥Â§©‰∏äÊù•ÔºåÂ•îÊµÅÂà∞Êµ∑‰∏çÂ§çÂõû„ÄÇ',
                'Èú≤‰ªé‰ªäÂ§úÁôΩÔºåÊúàÊòØÊïÖ‰π°Êòé„ÄÇ', 'Ëá™Âè§ÈÄ¢ÁßãÊÇ≤ÂØÇÂØ•ÔºåÊàëË®ÄÁßãÊó•ËÉúÊò•Êúù„ÄÇ',
                '‰∏§Â≤∏ÁåøÂ£∞Âïº‰∏ç‰ΩèÔºåËΩªËàüÂ∑≤Ëøá‰∏áÈáçÂ±±„ÄÇ', '‰∏ÄÂéª‰∫å‰∏âÈáåÔºåÁÉüÊùëÂõõ‰∫îÂÆ∂„ÄÇ',
                'ÈóÆÂêõ‰Ωï‰∏∫Âà´ÔºåÂøÉÈÄêÈùí‰∫ëË°å„ÄÇ', 'È£éÊÄ•Â§©È´òÁåøÂï∏ÂìÄÔºåÊ∏öÊ∏ÖÊ≤ôÁôΩÈ∏üÈ£ûÂõû„ÄÇ',
                'Èî¶ÂüéËôΩ‰∫ë‰πêÔºå‰∏çÂ¶ÇÊó©ËøòÂÆ∂„ÄÇ', 'ÁôΩ‰∏ãÈ©øÁ©∑ÂÜ¨ÊúõÔºåÁ∫¢Ê•ºÈöîÈõ®ÂºÑÊô¥ÂØí„ÄÇ',
                'Â§úÊ≥äÁâõÊ∏öÊÄÄÂè§ÔºåÁâõÊ∏öË•øÊ±üÂ§ú„ÄÇ', 'Á©∫Â±±Êñ∞Èõ®ÂêéÔºåÂ§©Ê∞îÊôöÊù•Áßã„ÄÇ',
                'Â±±‰∏≠Áõ∏ÈÄÅÁΩ¢ÔºåÊó•ÊöÆÊé©Êü¥Êââ„ÄÇ', 'ÂØíËùâÂáÑÂàáÔºåÂØπÈïø‰∫≠ÊôöÔºåÈ™§Èõ®ÂàùÊ≠á„ÄÇ',
                'Êπñ‰∏äÂàùÊô¥ÂêéÈõ®ÔºåÊ∞¥Èù¢ÊôïÂºÄÊ∏ÖÊôñ„ÄÇ', 'Â≠§ËàüËìëÁ¨†ÁøÅÔºåÁã¨ÈíìÂØíÊ±üÈõ™„ÄÇ',
                'ÈªÑÊ≤≥Ëøú‰∏äÁôΩ‰∫ëÈó¥Ôºå‰∏ÄÁâáÂ≠§Âüé‰∏á‰ªûÂ±±„ÄÇ', 'Êùæ‰∏ãÈóÆÁ´•Â≠êÔºåË®ÄÂ∏àÈááËçØÂéª„ÄÇ',
                'ÁôΩ‰∫ëÊ∑±Â§ÑÊúâ‰∫∫ÂÆ∂ÔºåÈªÑÈπ§Ê•º‰∏≠ÂêπÁéâÁ¨õ„ÄÇ', 'ÊûØËó§ËÄÅÊ†ëÊòèÈ∏¶ÔºåÂ∞èÊ°•ÊµÅÊ∞¥‰∫∫ÂÆ∂„ÄÇ',
                'ÂØíÂ±±ËΩ¨ËãçÁø†ÔºåÁßãÊ∞¥ÂÖ±ÈïøÂ§©‰∏ÄËâ≤„ÄÇ', 'Âπ¥Âπ¥Â≤ÅÂ≤ÅËä±Áõ∏‰ººÔºåÂ≤ÅÂ≤ÅÂπ¥Âπ¥‰∫∫‰∏çÂêå„ÄÇ',
                'Èî¶Ê±üÊò•Ëâ≤Êù•Â§©Âú∞ÔºåÁéâÂûíÊµÆ‰∫ëÂèòÂè§‰ªä„ÄÇ', 'Â§©Ë°óÂ∞èÈõ®Ê∂¶Â¶ÇÈÖ•ÔºåËçâËâ≤ÈÅ•ÁúãËøëÂç¥Êó†„ÄÇ',
                'ÈïøÊ±üÁªïÈÉ≠Áü•È±ºÁæéÔºåËãèÂ†§Êò•ÊôìËÉúÂú∞ÂÆú„ÄÇ'
            ];
            return poems[Math.floor(Math.random() * poems.length)];
        }

        function speakRandomPoem() {
            const poem = getRandomPoem();
            speakMessage(`${poem}`);
        }

        function speakWeather(weather) {
            const descriptions = {
                "clear sky": "Êô¥Â§©", "few clouds": "Â∞ëÈáè‰∫ë", "scattered clouds": "Â§ö‰∫ë",
                "broken clouds": "Â§ö‰∫ë", "shower rain": "ÈòµÈõ®", "rain": "Èõ®", 
                "light rain": "Â∞èÈõ®", "moderate rain": "‰∏≠Èõ®", "heavy rain": "Â§ßÈõ®",
                "very heavy rain": "ÁâπÂ§ßÊö¥Èõ®", "extreme rain": "ÊûÅÁ´ØÈôçÈõ®",
                "thunderstorm": "Èõ∑Êö¥", "thunderstorm with light rain": "Èõ∑ÈòµÈõ®", "thunderstorm with heavy rain": "Âº∫Èõ∑Èõ®",
                "snow": "Èõ™", "light snow": "Â∞èÈõ™", "moderate snow": "‰∏≠Èõ™", "heavy snow": "Â§ßÈõ™",
                "very heavy snow": "ÁâπÂ§ßÊö¥Èõ™", "extreme snow": "ÊûÅÁ´ØÈôçÈõ™",
                "sleet": "Èõ®Â§πÈõ™", "freezing rain": "ÂÜªÈõ®", "mist": "ËñÑÈõæ",
                "fog": "Èõæ", "haze": "Èúæ", "sand": "Ê≤ôÂ∞ò", "dust": "Êâ¨Â∞ò", "squall": "ÈòµÈ£é",
                "tornado": "ÈæôÂç∑È£é", "ash": "ÁÅ´Â±±ÁÅ∞", "drizzle": "ÊØõÊØõÈõ®",
                "overcast": "Èò¥Â§©", "partly cloudy": "Â±ÄÈÉ®Â§ö‰∫ë", "cloudy": "Â§ö‰∫ë",
                "tropical storm": "ÁÉ≠Â∏¶È£éÊö¥", "hurricane": "È£ìÈ£é", "cold": "ÂØíÂÜ∑", 
                "hot": "ÁÇéÁÉ≠", "windy": "Â§ßÈ£é", "breezy": "ÂæÆÈ£é", "blizzard": "Êö¥È£éÈõ™"
            };

            const weatherDescription = descriptions[weather.weather[0].description.toLowerCase()] || weather.weather[0].description;
            const temperature = weather.main.temp;
            const tempMax = weather.main.temp_max;
            const tempMin = weather.main.temp_min;
            const humidity = weather.main.humidity;
            const windSpeed = weather.wind.speed;
            const visibility = weather.visibility / 1000;

            let message = `‰ª•‰∏ãÊòØ‰ªäÂ§©${city}ÁöÑÂ§©Ê∞îÈ¢ÑÊä•ÔºöÂΩìÂâçÊ∞îÊ∏©‰∏∫${temperature}ÊëÑÊ∞èÂ∫¶Ôºå${weatherDescription}„ÄÇ` +
                          `È¢ÑËÆ°‰ªäÂ§©ÁöÑÊúÄÈ´òÊ∞îÊ∏©‰∏∫${tempMax}ÊëÑÊ∞èÂ∫¶Ôºå‰ªäÊôöÁöÑÊúÄ‰ΩéÊ∞îÊ∏©‰∏∫${tempMin}ÊëÑÊ∞èÂ∫¶„ÄÇ`;

            if (weather.rain && weather.rain['1h']) {
                var rainProbability = weather.rain['1h'];
                message += ` Êé•‰∏ãÊù•‰∏ÄÂ∞èÊó∂Êúâ${rainProbability * 100}%ÁöÑÈôçÈõ®Ê¶ÇÁéá„ÄÇ`;
            } else if (weather.rain && weather.rain['3h']) {
                var rainProbability = weather.rain['3h'];
                message += ` Êé•‰∏ãÊù•‰∏âÂ∞èÊó∂Êúâ${rainProbability * 100}%ÁöÑÈôçÈõ®Ê¶ÇÁéá„ÄÇ`;
            } else {
                message += ' ‰ªäÂ§©ÈôçÈõ®Ê¶ÇÁéáËæÉ‰Ωé„ÄÇ';
            }

            message += ` Ë•øÂçóÈ£éÈÄü‰∏∫ÊØèÂ∞èÊó∂${windSpeed}Á±≥„ÄÇ` +
                       ` ÊπøÂ∫¶‰∏∫${humidity}%„ÄÇ`;

            if (weatherDescription.includes('Êô¥') || weatherDescription.includes('Èò≥ÂÖâÊòéÂ™ö')) {
                message += ` Á¥´Â§ñÁ∫øÊåáÊï∞ÈÄÇ‰∏≠ÔºåÂ¶ÇÊûúÂ§ñÂá∫ÔºåËØ∑ËÆ∞ÂæóÊ∂ÇÈò≤ÊôíÈúú„ÄÇ`;
            } else if (weatherDescription.includes('Èõ®') || weatherDescription.includes('ÈòµÈõ®') || weatherDescription.includes('Èõ∑Êö¥')) {
                message += ` Âª∫ËÆÆÊÇ®Â§ñÂá∫Êó∂Êê∫Â∏¶Èõ®‰ºû„ÄÇ`;
            }

            message += ` ËÉΩËßÅÂ∫¶‰∏∫${visibility}ÂÖ¨Èáå„ÄÇ` +
                       `ËØ∑Ê≥®ÊÑèÂÆâÂÖ®Ôºå‰øùÊåÅÂ•ΩÂøÉÊÉÖÔºåÁ•ùÊÇ®ÊúâÁæéÂ•ΩÁöÑ‰∏ÄÂ§©ÔºÅ`;

            speakMessage(message);
        }

        function fetchWeather() {
            const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=zh_cn`; 
            fetch(apiUrl)
                .then(response => response.ok ? response.json() : Promise.reject('ÁΩëÁªúÂìçÂ∫î‰∏çÊ≠£Â∏∏'))
                .then(data => {
                    if (data.weather && data.main) {
                        speakWeather(data);
                    } else {
                        console.error('Êó†Ê≥ïËé∑ÂèñÂ§©Ê∞îÊï∞ÊçÆ');
                    }
                })
                .catch(error => console.error('Ëé∑ÂèñÂ§©Ê∞îÊï∞ÊçÆÊó∂Âá∫Èîô:', error));
        }

        window.onload = function() {
            speakMessage('Ê¨¢Ëøé‰ΩøÁî®ËØ≠Èü≥Êí≠Êä•Á≥ªÁªüÔºÅ');
            checkWebsiteAccess(websites);
            speakCurrentTime();
            fetchWeather();
            speakRandomPoem(); 
            setInterval(updateTime, 1000);
        };
    </script>
</body>
</html>